// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/10/2023 15:02:38"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    CPU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CPU_vlg_sample_tst(
	clk,
	sampler_tx
);
input  clk;
output sampler_tx;

reg sample;
time current_time;
always @(clk)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module CPU_vlg_check_tst (
	ALU,
	ALUop,
	ALUSrcB,
	Clear,
	GroupWrite,
	INS,
	LED01,
	LED02,
	LED03,
	LED04,
	MemToReg,
	MemWrite,
	overflow,
	PCSource,
	read_data2,
	RegDst,
	RegWrite,
	sampler_rx
);
input [31:0] ALU;
input  ALUop;
input  ALUSrcB;
input  Clear;
input [31:0] GroupWrite;
input [31:0] INS;
input [6:0] LED01;
input [6:0] LED02;
input [6:0] LED03;
input [6:0] LED04;
input  MemToReg;
input  MemWrite;
input  overflow;
input  PCSource;
input [31:0] read_data2;
input  RegDst;
input  RegWrite;
input sampler_rx;

reg [31:0] ALU_expected;
reg  ALUop_expected;
reg  ALUSrcB_expected;
reg  Clear_expected;
reg [31:0] GroupWrite_expected;
reg [31:0] INS_expected;
reg [6:0] LED01_expected;
reg [6:0] LED02_expected;
reg [6:0] LED03_expected;
reg [6:0] LED04_expected;
reg  MemToReg_expected;
reg  MemWrite_expected;
reg  overflow_expected;
reg  PCSource_expected;
reg [31:0] read_data2_expected;
reg  RegDst_expected;
reg  RegWrite_expected;

reg [31:0] ALU_prev;
reg  ALUop_prev;
reg  ALUSrcB_prev;
reg  Clear_prev;
reg [31:0] GroupWrite_prev;
reg [31:0] INS_prev;
reg [6:0] LED01_prev;
reg [6:0] LED02_prev;
reg [6:0] LED03_prev;
reg [6:0] LED04_prev;
reg  MemToReg_prev;
reg  MemWrite_prev;
reg  overflow_prev;
reg  PCSource_prev;
reg [31:0] read_data2_prev;
reg  RegDst_prev;
reg  RegWrite_prev;

reg [31:0] ALU_expected_prev;
reg  ALUop_expected_prev;
reg  ALUSrcB_expected_prev;
reg  Clear_expected_prev;
reg [31:0] INS_expected_prev;
reg  MemToReg_expected_prev;
reg  MemWrite_expected_prev;
reg  overflow_expected_prev;
reg  PCSource_expected_prev;
reg  RegDst_expected_prev;
reg  RegWrite_expected_prev;

reg [31:0] last_ALU_exp;
reg  last_ALUop_exp;
reg  last_ALUSrcB_exp;
reg  last_Clear_exp;
reg [31:0] last_INS_exp;
reg  last_MemToReg_exp;
reg  last_MemWrite_exp;
reg  last_overflow_exp;
reg  last_PCSource_exp;
reg  last_RegDst_exp;
reg  last_RegWrite_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:17] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 17'b1;
end

// update real /o prevs

always @(trigger)
begin
	ALU_prev = ALU;
	ALUop_prev = ALUop;
	ALUSrcB_prev = ALUSrcB;
	Clear_prev = Clear;
	GroupWrite_prev = GroupWrite;
	INS_prev = INS;
	LED01_prev = LED01;
	LED02_prev = LED02;
	LED03_prev = LED03;
	LED04_prev = LED04;
	MemToReg_prev = MemToReg;
	MemWrite_prev = MemWrite;
	overflow_prev = overflow;
	PCSource_prev = PCSource;
	read_data2_prev = read_data2;
	RegDst_prev = RegDst;
	RegWrite_prev = RegWrite;
end

// update expected /o prevs

always @(trigger)
begin
	ALU_expected_prev = ALU_expected;
	ALUop_expected_prev = ALUop_expected;
	ALUSrcB_expected_prev = ALUSrcB_expected;
	Clear_expected_prev = Clear_expected;
	INS_expected_prev = INS_expected;
	MemToReg_expected_prev = MemToReg_expected;
	MemWrite_expected_prev = MemWrite_expected;
	overflow_expected_prev = overflow_expected;
	PCSource_expected_prev = PCSource_expected;
	RegDst_expected_prev = RegDst_expected;
	RegWrite_expected_prev = RegWrite_expected;
end


// expected INS[ 31 ]
initial
begin
	INS_expected[31] = 1'bX;
end 
// expected INS[ 30 ]
initial
begin
	INS_expected[30] = 1'bX;
end 
// expected INS[ 29 ]
initial
begin
	INS_expected[29] = 1'bX;
end 
// expected INS[ 28 ]
initial
begin
	INS_expected[28] = 1'bX;
end 
// expected INS[ 27 ]
initial
begin
	INS_expected[27] = 1'bX;
end 
// expected INS[ 26 ]
initial
begin
	INS_expected[26] = 1'bX;
end 
// expected INS[ 25 ]
initial
begin
	INS_expected[25] = 1'bX;
end 
// expected INS[ 24 ]
initial
begin
	INS_expected[24] = 1'bX;
end 
// expected INS[ 23 ]
initial
begin
	INS_expected[23] = 1'bX;
end 
// expected INS[ 22 ]
initial
begin
	INS_expected[22] = 1'bX;
end 
// expected INS[ 21 ]
initial
begin
	INS_expected[21] = 1'bX;
end 
// expected INS[ 20 ]
initial
begin
	INS_expected[20] = 1'bX;
end 
// expected INS[ 19 ]
initial
begin
	INS_expected[19] = 1'bX;
end 
// expected INS[ 18 ]
initial
begin
	INS_expected[18] = 1'bX;
end 
// expected INS[ 17 ]
initial
begin
	INS_expected[17] = 1'bX;
end 
// expected INS[ 16 ]
initial
begin
	INS_expected[16] = 1'bX;
end 
// expected INS[ 15 ]
initial
begin
	INS_expected[15] = 1'bX;
end 
// expected INS[ 14 ]
initial
begin
	INS_expected[14] = 1'bX;
end 
// expected INS[ 13 ]
initial
begin
	INS_expected[13] = 1'bX;
end 
// expected INS[ 12 ]
initial
begin
	INS_expected[12] = 1'bX;
end 
// expected INS[ 11 ]
initial
begin
	INS_expected[11] = 1'bX;
end 
// expected INS[ 10 ]
initial
begin
	INS_expected[10] = 1'bX;
end 
// expected INS[ 9 ]
initial
begin
	INS_expected[9] = 1'bX;
end 
// expected INS[ 8 ]
initial
begin
	INS_expected[8] = 1'bX;
end 
// expected INS[ 7 ]
initial
begin
	INS_expected[7] = 1'bX;
end 
// expected INS[ 6 ]
initial
begin
	INS_expected[6] = 1'bX;
end 
// expected INS[ 5 ]
initial
begin
	INS_expected[5] = 1'bX;
end 
// expected INS[ 4 ]
initial
begin
	INS_expected[4] = 1'bX;
end 
// expected INS[ 3 ]
initial
begin
	INS_expected[3] = 1'bX;
end 
// expected INS[ 2 ]
initial
begin
	INS_expected[2] = 1'bX;
end 
// expected INS[ 1 ]
initial
begin
	INS_expected[1] = 1'bX;
end 
// expected INS[ 0 ]
initial
begin
	INS_expected[0] = 1'bX;
end 

// expected ALUop
initial
begin
	ALUop_expected = 1'bX;
end 

// expected ALUSrcB
initial
begin
	ALUSrcB_expected = 1'bX;
end 

// expected Clear
initial
begin
	Clear_expected = 1'bX;
end 

// expected MemToReg
initial
begin
	MemToReg_expected = 1'bX;
end 

// expected MemWrite
initial
begin
	MemWrite_expected = 1'bX;
end 

// expected overflow
initial
begin
	overflow_expected = 1'bX;
end 

// expected PCSource
initial
begin
	PCSource_expected = 1'bX;
end 

// expected RegDst
initial
begin
	RegDst_expected = 1'bX;
end 

// expected RegWrite
initial
begin
	RegWrite_expected = 1'bX;
end 
// expected ALU[ 31 ]
initial
begin
	ALU_expected[31] = 1'bX;
end 
// expected ALU[ 30 ]
initial
begin
	ALU_expected[30] = 1'bX;
end 
// expected ALU[ 29 ]
initial
begin
	ALU_expected[29] = 1'bX;
end 
// expected ALU[ 28 ]
initial
begin
	ALU_expected[28] = 1'bX;
end 
// expected ALU[ 27 ]
initial
begin
	ALU_expected[27] = 1'bX;
end 
// expected ALU[ 26 ]
initial
begin
	ALU_expected[26] = 1'bX;
end 
// expected ALU[ 25 ]
initial
begin
	ALU_expected[25] = 1'bX;
end 
// expected ALU[ 24 ]
initial
begin
	ALU_expected[24] = 1'bX;
end 
// expected ALU[ 23 ]
initial
begin
	ALU_expected[23] = 1'bX;
end 
// expected ALU[ 22 ]
initial
begin
	ALU_expected[22] = 1'bX;
end 
// expected ALU[ 21 ]
initial
begin
	ALU_expected[21] = 1'bX;
end 
// expected ALU[ 20 ]
initial
begin
	ALU_expected[20] = 1'bX;
end 
// expected ALU[ 19 ]
initial
begin
	ALU_expected[19] = 1'bX;
end 
// expected ALU[ 18 ]
initial
begin
	ALU_expected[18] = 1'bX;
end 
// expected ALU[ 17 ]
initial
begin
	ALU_expected[17] = 1'bX;
end 
// expected ALU[ 16 ]
initial
begin
	ALU_expected[16] = 1'bX;
end 
// expected ALU[ 15 ]
initial
begin
	ALU_expected[15] = 1'bX;
end 
// expected ALU[ 14 ]
initial
begin
	ALU_expected[14] = 1'bX;
end 
// expected ALU[ 13 ]
initial
begin
	ALU_expected[13] = 1'bX;
end 
// expected ALU[ 12 ]
initial
begin
	ALU_expected[12] = 1'bX;
end 
// expected ALU[ 11 ]
initial
begin
	ALU_expected[11] = 1'bX;
end 
// expected ALU[ 10 ]
initial
begin
	ALU_expected[10] = 1'bX;
end 
// expected ALU[ 9 ]
initial
begin
	ALU_expected[9] = 1'bX;
end 
// expected ALU[ 8 ]
initial
begin
	ALU_expected[8] = 1'bX;
end 
// expected ALU[ 7 ]
initial
begin
	ALU_expected[7] = 1'bX;
end 
// expected ALU[ 6 ]
initial
begin
	ALU_expected[6] = 1'bX;
end 
// expected ALU[ 5 ]
initial
begin
	ALU_expected[5] = 1'bX;
end 
// expected ALU[ 4 ]
initial
begin
	ALU_expected[4] = 1'bX;
end 
// expected ALU[ 3 ]
initial
begin
	ALU_expected[3] = 1'bX;
end 
// expected ALU[ 2 ]
initial
begin
	ALU_expected[2] = 1'bX;
end 
// expected ALU[ 1 ]
initial
begin
	ALU_expected[1] = 1'bX;
end 
// expected ALU[ 0 ]
initial
begin
	ALU_expected[0] = 1'bX;
end 
// generate trigger
always @(ALU_expected or ALU or ALUop_expected or ALUop or ALUSrcB_expected or ALUSrcB or Clear_expected or Clear or GroupWrite_expected or GroupWrite or INS_expected or INS or LED01_expected or LED01 or LED02_expected or LED02 or LED03_expected or LED03 or LED04_expected or LED04 or MemToReg_expected or MemToReg or MemWrite_expected or MemWrite or overflow_expected or overflow or PCSource_expected or PCSource or read_data2_expected or read_data2 or RegDst_expected or RegDst or RegWrite_expected or RegWrite)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ALU = %b | expected ALUop = %b | expected ALUSrcB = %b | expected Clear = %b | expected GroupWrite = %b | expected INS = %b | expected LED01 = %b | expected LED02 = %b | expected LED03 = %b | expected LED04 = %b | expected MemToReg = %b | expected MemWrite = %b | expected overflow = %b | expected PCSource = %b | expected read_data2 = %b | expected RegDst = %b | expected RegWrite = %b | ",ALU_expected_prev,ALUop_expected_prev,ALUSrcB_expected_prev,Clear_expected_prev,GroupWrite_expected_prev,INS_expected_prev,LED01_expected_prev,LED02_expected_prev,LED03_expected_prev,LED04_expected_prev,MemToReg_expected_prev,MemWrite_expected_prev,overflow_expected_prev,PCSource_expected_prev,read_data2_expected_prev,RegDst_expected_prev,RegWrite_expected_prev);
	$display("| real ALU = %b | real ALUop = %b | real ALUSrcB = %b | real Clear = %b | real GroupWrite = %b | real INS = %b | real LED01 = %b | real LED02 = %b | real LED03 = %b | real LED04 = %b | real MemToReg = %b | real MemWrite = %b | real overflow = %b | real PCSource = %b | real read_data2 = %b | real RegDst = %b | real RegWrite = %b | ",ALU_prev,ALUop_prev,ALUSrcB_prev,Clear_prev,GroupWrite_prev,INS_prev,LED01_prev,LED02_prev,LED03_prev,LED04_prev,MemToReg_prev,MemWrite_prev,overflow_prev,PCSource_prev,read_data2_prev,RegDst_prev,RegWrite_prev);
`endif
	if (
		( ALU_expected_prev[0] !== 1'bx ) && ( ALU_prev[0] !== ALU_expected_prev[0] )
		&& ((ALU_expected_prev[0] !== last_ALU_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_expected_prev);
		$display ("     Real value = %b", ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_exp[0] = ALU_expected_prev[0];
	end
	if (
		( ALU_expected_prev[1] !== 1'bx ) && ( ALU_prev[1] !== ALU_expected_prev[1] )
		&& ((ALU_expected_prev[1] !== last_ALU_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_expected_prev);
		$display ("     Real value = %b", ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_exp[1] = ALU_expected_prev[1];
	end
	if (
		( ALU_expected_prev[2] !== 1'bx ) && ( ALU_prev[2] !== ALU_expected_prev[2] )
		&& ((ALU_expected_prev[2] !== last_ALU_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_expected_prev);
		$display ("     Real value = %b", ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_exp[2] = ALU_expected_prev[2];
	end
	if (
		( ALU_expected_prev[3] !== 1'bx ) && ( ALU_prev[3] !== ALU_expected_prev[3] )
		&& ((ALU_expected_prev[3] !== last_ALU_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_expected_prev);
		$display ("     Real value = %b", ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_exp[3] = ALU_expected_prev[3];
	end
	if (
		( ALU_expected_prev[4] !== 1'bx ) && ( ALU_prev[4] !== ALU_expected_prev[4] )
		&& ((ALU_expected_prev[4] !== last_ALU_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_expected_prev);
		$display ("     Real value = %b", ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_exp[4] = ALU_expected_prev[4];
	end
	if (
		( ALU_expected_prev[5] !== 1'bx ) && ( ALU_prev[5] !== ALU_expected_prev[5] )
		&& ((ALU_expected_prev[5] !== last_ALU_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_expected_prev);
		$display ("     Real value = %b", ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_exp[5] = ALU_expected_prev[5];
	end
	if (
		( ALU_expected_prev[6] !== 1'bx ) && ( ALU_prev[6] !== ALU_expected_prev[6] )
		&& ((ALU_expected_prev[6] !== last_ALU_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_expected_prev);
		$display ("     Real value = %b", ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_exp[6] = ALU_expected_prev[6];
	end
	if (
		( ALU_expected_prev[7] !== 1'bx ) && ( ALU_prev[7] !== ALU_expected_prev[7] )
		&& ((ALU_expected_prev[7] !== last_ALU_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_expected_prev);
		$display ("     Real value = %b", ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_exp[7] = ALU_expected_prev[7];
	end
	if (
		( ALU_expected_prev[8] !== 1'bx ) && ( ALU_prev[8] !== ALU_expected_prev[8] )
		&& ((ALU_expected_prev[8] !== last_ALU_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_expected_prev);
		$display ("     Real value = %b", ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_exp[8] = ALU_expected_prev[8];
	end
	if (
		( ALU_expected_prev[9] !== 1'bx ) && ( ALU_prev[9] !== ALU_expected_prev[9] )
		&& ((ALU_expected_prev[9] !== last_ALU_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_expected_prev);
		$display ("     Real value = %b", ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_exp[9] = ALU_expected_prev[9];
	end
	if (
		( ALU_expected_prev[10] !== 1'bx ) && ( ALU_prev[10] !== ALU_expected_prev[10] )
		&& ((ALU_expected_prev[10] !== last_ALU_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_expected_prev);
		$display ("     Real value = %b", ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_exp[10] = ALU_expected_prev[10];
	end
	if (
		( ALU_expected_prev[11] !== 1'bx ) && ( ALU_prev[11] !== ALU_expected_prev[11] )
		&& ((ALU_expected_prev[11] !== last_ALU_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_expected_prev);
		$display ("     Real value = %b", ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_exp[11] = ALU_expected_prev[11];
	end
	if (
		( ALU_expected_prev[12] !== 1'bx ) && ( ALU_prev[12] !== ALU_expected_prev[12] )
		&& ((ALU_expected_prev[12] !== last_ALU_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_expected_prev);
		$display ("     Real value = %b", ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_exp[12] = ALU_expected_prev[12];
	end
	if (
		( ALU_expected_prev[13] !== 1'bx ) && ( ALU_prev[13] !== ALU_expected_prev[13] )
		&& ((ALU_expected_prev[13] !== last_ALU_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_expected_prev);
		$display ("     Real value = %b", ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_exp[13] = ALU_expected_prev[13];
	end
	if (
		( ALU_expected_prev[14] !== 1'bx ) && ( ALU_prev[14] !== ALU_expected_prev[14] )
		&& ((ALU_expected_prev[14] !== last_ALU_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_expected_prev);
		$display ("     Real value = %b", ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_exp[14] = ALU_expected_prev[14];
	end
	if (
		( ALU_expected_prev[15] !== 1'bx ) && ( ALU_prev[15] !== ALU_expected_prev[15] )
		&& ((ALU_expected_prev[15] !== last_ALU_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_expected_prev);
		$display ("     Real value = %b", ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_exp[15] = ALU_expected_prev[15];
	end
	if (
		( ALU_expected_prev[16] !== 1'bx ) && ( ALU_prev[16] !== ALU_expected_prev[16] )
		&& ((ALU_expected_prev[16] !== last_ALU_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_expected_prev);
		$display ("     Real value = %b", ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_exp[16] = ALU_expected_prev[16];
	end
	if (
		( ALU_expected_prev[17] !== 1'bx ) && ( ALU_prev[17] !== ALU_expected_prev[17] )
		&& ((ALU_expected_prev[17] !== last_ALU_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_expected_prev);
		$display ("     Real value = %b", ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_exp[17] = ALU_expected_prev[17];
	end
	if (
		( ALU_expected_prev[18] !== 1'bx ) && ( ALU_prev[18] !== ALU_expected_prev[18] )
		&& ((ALU_expected_prev[18] !== last_ALU_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_expected_prev);
		$display ("     Real value = %b", ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_exp[18] = ALU_expected_prev[18];
	end
	if (
		( ALU_expected_prev[19] !== 1'bx ) && ( ALU_prev[19] !== ALU_expected_prev[19] )
		&& ((ALU_expected_prev[19] !== last_ALU_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_expected_prev);
		$display ("     Real value = %b", ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_exp[19] = ALU_expected_prev[19];
	end
	if (
		( ALU_expected_prev[20] !== 1'bx ) && ( ALU_prev[20] !== ALU_expected_prev[20] )
		&& ((ALU_expected_prev[20] !== last_ALU_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_expected_prev);
		$display ("     Real value = %b", ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_exp[20] = ALU_expected_prev[20];
	end
	if (
		( ALU_expected_prev[21] !== 1'bx ) && ( ALU_prev[21] !== ALU_expected_prev[21] )
		&& ((ALU_expected_prev[21] !== last_ALU_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_expected_prev);
		$display ("     Real value = %b", ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_exp[21] = ALU_expected_prev[21];
	end
	if (
		( ALU_expected_prev[22] !== 1'bx ) && ( ALU_prev[22] !== ALU_expected_prev[22] )
		&& ((ALU_expected_prev[22] !== last_ALU_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_expected_prev);
		$display ("     Real value = %b", ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_exp[22] = ALU_expected_prev[22];
	end
	if (
		( ALU_expected_prev[23] !== 1'bx ) && ( ALU_prev[23] !== ALU_expected_prev[23] )
		&& ((ALU_expected_prev[23] !== last_ALU_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_expected_prev);
		$display ("     Real value = %b", ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_exp[23] = ALU_expected_prev[23];
	end
	if (
		( ALU_expected_prev[24] !== 1'bx ) && ( ALU_prev[24] !== ALU_expected_prev[24] )
		&& ((ALU_expected_prev[24] !== last_ALU_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_expected_prev);
		$display ("     Real value = %b", ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_exp[24] = ALU_expected_prev[24];
	end
	if (
		( ALU_expected_prev[25] !== 1'bx ) && ( ALU_prev[25] !== ALU_expected_prev[25] )
		&& ((ALU_expected_prev[25] !== last_ALU_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_expected_prev);
		$display ("     Real value = %b", ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_exp[25] = ALU_expected_prev[25];
	end
	if (
		( ALU_expected_prev[26] !== 1'bx ) && ( ALU_prev[26] !== ALU_expected_prev[26] )
		&& ((ALU_expected_prev[26] !== last_ALU_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_expected_prev);
		$display ("     Real value = %b", ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_exp[26] = ALU_expected_prev[26];
	end
	if (
		( ALU_expected_prev[27] !== 1'bx ) && ( ALU_prev[27] !== ALU_expected_prev[27] )
		&& ((ALU_expected_prev[27] !== last_ALU_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_expected_prev);
		$display ("     Real value = %b", ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_exp[27] = ALU_expected_prev[27];
	end
	if (
		( ALU_expected_prev[28] !== 1'bx ) && ( ALU_prev[28] !== ALU_expected_prev[28] )
		&& ((ALU_expected_prev[28] !== last_ALU_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_expected_prev);
		$display ("     Real value = %b", ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_exp[28] = ALU_expected_prev[28];
	end
	if (
		( ALU_expected_prev[29] !== 1'bx ) && ( ALU_prev[29] !== ALU_expected_prev[29] )
		&& ((ALU_expected_prev[29] !== last_ALU_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_expected_prev);
		$display ("     Real value = %b", ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_exp[29] = ALU_expected_prev[29];
	end
	if (
		( ALU_expected_prev[30] !== 1'bx ) && ( ALU_prev[30] !== ALU_expected_prev[30] )
		&& ((ALU_expected_prev[30] !== last_ALU_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_expected_prev);
		$display ("     Real value = %b", ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_exp[30] = ALU_expected_prev[30];
	end
	if (
		( ALU_expected_prev[31] !== 1'bx ) && ( ALU_prev[31] !== ALU_expected_prev[31] )
		&& ((ALU_expected_prev[31] !== last_ALU_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_expected_prev);
		$display ("     Real value = %b", ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_exp[31] = ALU_expected_prev[31];
	end
	if (
		( ALUop_expected_prev !== 1'bx ) && ( ALUop_prev !== ALUop_expected_prev )
		&& ((ALUop_expected_prev !== last_ALUop_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUop :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUop_expected_prev);
		$display ("     Real value = %b", ALUop_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUop_exp = ALUop_expected_prev;
	end
	if (
		( ALUSrcB_expected_prev !== 1'bx ) && ( ALUSrcB_prev !== ALUSrcB_expected_prev )
		&& ((ALUSrcB_expected_prev !== last_ALUSrcB_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUSrcB :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUSrcB_expected_prev);
		$display ("     Real value = %b", ALUSrcB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUSrcB_exp = ALUSrcB_expected_prev;
	end
	if (
		( Clear_expected_prev !== 1'bx ) && ( Clear_prev !== Clear_expected_prev )
		&& ((Clear_expected_prev !== last_Clear_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Clear :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Clear_expected_prev);
		$display ("     Real value = %b", Clear_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Clear_exp = Clear_expected_prev;
	end
	if (
		( INS_expected_prev[0] !== 1'bx ) && ( INS_prev[0] !== INS_expected_prev[0] )
		&& ((INS_expected_prev[0] !== last_INS_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_INS_exp[0] = INS_expected_prev[0];
	end
	if (
		( INS_expected_prev[1] !== 1'bx ) && ( INS_prev[1] !== INS_expected_prev[1] )
		&& ((INS_expected_prev[1] !== last_INS_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_INS_exp[1] = INS_expected_prev[1];
	end
	if (
		( INS_expected_prev[2] !== 1'bx ) && ( INS_prev[2] !== INS_expected_prev[2] )
		&& ((INS_expected_prev[2] !== last_INS_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_INS_exp[2] = INS_expected_prev[2];
	end
	if (
		( INS_expected_prev[3] !== 1'bx ) && ( INS_prev[3] !== INS_expected_prev[3] )
		&& ((INS_expected_prev[3] !== last_INS_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_INS_exp[3] = INS_expected_prev[3];
	end
	if (
		( INS_expected_prev[4] !== 1'bx ) && ( INS_prev[4] !== INS_expected_prev[4] )
		&& ((INS_expected_prev[4] !== last_INS_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_INS_exp[4] = INS_expected_prev[4];
	end
	if (
		( INS_expected_prev[5] !== 1'bx ) && ( INS_prev[5] !== INS_expected_prev[5] )
		&& ((INS_expected_prev[5] !== last_INS_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_INS_exp[5] = INS_expected_prev[5];
	end
	if (
		( INS_expected_prev[6] !== 1'bx ) && ( INS_prev[6] !== INS_expected_prev[6] )
		&& ((INS_expected_prev[6] !== last_INS_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_INS_exp[6] = INS_expected_prev[6];
	end
	if (
		( INS_expected_prev[7] !== 1'bx ) && ( INS_prev[7] !== INS_expected_prev[7] )
		&& ((INS_expected_prev[7] !== last_INS_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_INS_exp[7] = INS_expected_prev[7];
	end
	if (
		( INS_expected_prev[8] !== 1'bx ) && ( INS_prev[8] !== INS_expected_prev[8] )
		&& ((INS_expected_prev[8] !== last_INS_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_INS_exp[8] = INS_expected_prev[8];
	end
	if (
		( INS_expected_prev[9] !== 1'bx ) && ( INS_prev[9] !== INS_expected_prev[9] )
		&& ((INS_expected_prev[9] !== last_INS_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_INS_exp[9] = INS_expected_prev[9];
	end
	if (
		( INS_expected_prev[10] !== 1'bx ) && ( INS_prev[10] !== INS_expected_prev[10] )
		&& ((INS_expected_prev[10] !== last_INS_exp[10]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_INS_exp[10] = INS_expected_prev[10];
	end
	if (
		( INS_expected_prev[11] !== 1'bx ) && ( INS_prev[11] !== INS_expected_prev[11] )
		&& ((INS_expected_prev[11] !== last_INS_exp[11]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_INS_exp[11] = INS_expected_prev[11];
	end
	if (
		( INS_expected_prev[12] !== 1'bx ) && ( INS_prev[12] !== INS_expected_prev[12] )
		&& ((INS_expected_prev[12] !== last_INS_exp[12]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_INS_exp[12] = INS_expected_prev[12];
	end
	if (
		( INS_expected_prev[13] !== 1'bx ) && ( INS_prev[13] !== INS_expected_prev[13] )
		&& ((INS_expected_prev[13] !== last_INS_exp[13]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_INS_exp[13] = INS_expected_prev[13];
	end
	if (
		( INS_expected_prev[14] !== 1'bx ) && ( INS_prev[14] !== INS_expected_prev[14] )
		&& ((INS_expected_prev[14] !== last_INS_exp[14]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_INS_exp[14] = INS_expected_prev[14];
	end
	if (
		( INS_expected_prev[15] !== 1'bx ) && ( INS_prev[15] !== INS_expected_prev[15] )
		&& ((INS_expected_prev[15] !== last_INS_exp[15]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_INS_exp[15] = INS_expected_prev[15];
	end
	if (
		( INS_expected_prev[16] !== 1'bx ) && ( INS_prev[16] !== INS_expected_prev[16] )
		&& ((INS_expected_prev[16] !== last_INS_exp[16]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_INS_exp[16] = INS_expected_prev[16];
	end
	if (
		( INS_expected_prev[17] !== 1'bx ) && ( INS_prev[17] !== INS_expected_prev[17] )
		&& ((INS_expected_prev[17] !== last_INS_exp[17]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_INS_exp[17] = INS_expected_prev[17];
	end
	if (
		( INS_expected_prev[18] !== 1'bx ) && ( INS_prev[18] !== INS_expected_prev[18] )
		&& ((INS_expected_prev[18] !== last_INS_exp[18]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_INS_exp[18] = INS_expected_prev[18];
	end
	if (
		( INS_expected_prev[19] !== 1'bx ) && ( INS_prev[19] !== INS_expected_prev[19] )
		&& ((INS_expected_prev[19] !== last_INS_exp[19]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_INS_exp[19] = INS_expected_prev[19];
	end
	if (
		( INS_expected_prev[20] !== 1'bx ) && ( INS_prev[20] !== INS_expected_prev[20] )
		&& ((INS_expected_prev[20] !== last_INS_exp[20]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_INS_exp[20] = INS_expected_prev[20];
	end
	if (
		( INS_expected_prev[21] !== 1'bx ) && ( INS_prev[21] !== INS_expected_prev[21] )
		&& ((INS_expected_prev[21] !== last_INS_exp[21]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_INS_exp[21] = INS_expected_prev[21];
	end
	if (
		( INS_expected_prev[22] !== 1'bx ) && ( INS_prev[22] !== INS_expected_prev[22] )
		&& ((INS_expected_prev[22] !== last_INS_exp[22]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_INS_exp[22] = INS_expected_prev[22];
	end
	if (
		( INS_expected_prev[23] !== 1'bx ) && ( INS_prev[23] !== INS_expected_prev[23] )
		&& ((INS_expected_prev[23] !== last_INS_exp[23]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_INS_exp[23] = INS_expected_prev[23];
	end
	if (
		( INS_expected_prev[24] !== 1'bx ) && ( INS_prev[24] !== INS_expected_prev[24] )
		&& ((INS_expected_prev[24] !== last_INS_exp[24]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_INS_exp[24] = INS_expected_prev[24];
	end
	if (
		( INS_expected_prev[25] !== 1'bx ) && ( INS_prev[25] !== INS_expected_prev[25] )
		&& ((INS_expected_prev[25] !== last_INS_exp[25]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_INS_exp[25] = INS_expected_prev[25];
	end
	if (
		( INS_expected_prev[26] !== 1'bx ) && ( INS_prev[26] !== INS_expected_prev[26] )
		&& ((INS_expected_prev[26] !== last_INS_exp[26]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_INS_exp[26] = INS_expected_prev[26];
	end
	if (
		( INS_expected_prev[27] !== 1'bx ) && ( INS_prev[27] !== INS_expected_prev[27] )
		&& ((INS_expected_prev[27] !== last_INS_exp[27]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_INS_exp[27] = INS_expected_prev[27];
	end
	if (
		( INS_expected_prev[28] !== 1'bx ) && ( INS_prev[28] !== INS_expected_prev[28] )
		&& ((INS_expected_prev[28] !== last_INS_exp[28]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_INS_exp[28] = INS_expected_prev[28];
	end
	if (
		( INS_expected_prev[29] !== 1'bx ) && ( INS_prev[29] !== INS_expected_prev[29] )
		&& ((INS_expected_prev[29] !== last_INS_exp[29]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_INS_exp[29] = INS_expected_prev[29];
	end
	if (
		( INS_expected_prev[30] !== 1'bx ) && ( INS_prev[30] !== INS_expected_prev[30] )
		&& ((INS_expected_prev[30] !== last_INS_exp[30]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_INS_exp[30] = INS_expected_prev[30];
	end
	if (
		( INS_expected_prev[31] !== 1'bx ) && ( INS_prev[31] !== INS_expected_prev[31] )
		&& ((INS_expected_prev[31] !== last_INS_exp[31]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INS[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INS_expected_prev);
		$display ("     Real value = %b", INS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_INS_exp[31] = INS_expected_prev[31];
	end
	if (
		( MemToReg_expected_prev !== 1'bx ) && ( MemToReg_prev !== MemToReg_expected_prev )
		&& ((MemToReg_expected_prev !== last_MemToReg_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemToReg :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemToReg_expected_prev);
		$display ("     Real value = %b", MemToReg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_MemToReg_exp = MemToReg_expected_prev;
	end
	if (
		( MemWrite_expected_prev !== 1'bx ) && ( MemWrite_prev !== MemWrite_expected_prev )
		&& ((MemWrite_expected_prev !== last_MemWrite_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemWrite :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemWrite_expected_prev);
		$display ("     Real value = %b", MemWrite_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_MemWrite_exp = MemWrite_expected_prev;
	end
	if (
		( overflow_expected_prev !== 1'bx ) && ( overflow_prev !== overflow_expected_prev )
		&& ((overflow_expected_prev !== last_overflow_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port overflow :: @time = %t",  $realtime);
		$display ("     Expected value = %b", overflow_expected_prev);
		$display ("     Real value = %b", overflow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_overflow_exp = overflow_expected_prev;
	end
	if (
		( PCSource_expected_prev !== 1'bx ) && ( PCSource_prev !== PCSource_expected_prev )
		&& ((PCSource_expected_prev !== last_PCSource_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCSource :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCSource_expected_prev);
		$display ("     Real value = %b", PCSource_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_PCSource_exp = PCSource_expected_prev;
	end
	if (
		( RegDst_expected_prev !== 1'bx ) && ( RegDst_prev !== RegDst_expected_prev )
		&& ((RegDst_expected_prev !== last_RegDst_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegDst :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegDst_expected_prev);
		$display ("     Real value = %b", RegDst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_RegDst_exp = RegDst_expected_prev;
	end
	if (
		( RegWrite_expected_prev !== 1'bx ) && ( RegWrite_prev !== RegWrite_expected_prev )
		&& ((RegWrite_expected_prev !== last_RegWrite_exp) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegWrite :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegWrite_expected_prev);
		$display ("     Real value = %b", RegWrite_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RegWrite_exp = RegWrite_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module CPU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
// wires                                               
wire [31:0] ALU;
wire ALUop;
wire ALUSrcB;
wire Clear;
wire [31:0] GroupWrite;
wire [31:0] INS;
wire [6:0] LED01;
wire [6:0] LED02;
wire [6:0] LED03;
wire [6:0] LED04;
wire MemToReg;
wire MemWrite;
wire overflow;
wire PCSource;
wire [31:0] read_data2;
wire RegDst;
wire RegWrite;

wire sampler;                             

// assign statements (if any)                          
CPU i1 (
// port map - connection between master ports and signals/registers   
	.ALU(ALU),
	.ALUop(ALUop),
	.ALUSrcB(ALUSrcB),
	.Clear(Clear),
	.clk(clk),
	.GroupWrite(GroupWrite),
	.INS(INS),
	.LED01(LED01),
	.LED02(LED02),
	.LED03(LED03),
	.LED04(LED04),
	.MemToReg(MemToReg),
	.MemWrite(MemWrite),
	.overflow(overflow),
	.PCSource(PCSource),
	.read_data2(read_data2),
	.RegDst(RegDst),
	.RegWrite(RegWrite)
);

// clk
initial
begin
	repeat(33)
	begin
		clk = 1'b0;
		clk = #15000 1'b1;
		# 15000;
	end
	clk = 1'b0;
end 

CPU_vlg_sample_tst tb_sample (
	.clk(clk),
	.sampler_tx(sampler)
);

CPU_vlg_check_tst tb_out(
	.ALU(ALU),
	.ALUop(ALUop),
	.ALUSrcB(ALUSrcB),
	.Clear(Clear),
	.GroupWrite(GroupWrite),
	.INS(INS),
	.LED01(LED01),
	.LED02(LED02),
	.LED03(LED03),
	.LED04(LED04),
	.MemToReg(MemToReg),
	.MemWrite(MemWrite),
	.overflow(overflow),
	.PCSource(PCSource),
	.read_data2(read_data2),
	.RegDst(RegDst),
	.RegWrite(RegWrite),
	.sampler_rx(sampler)
);
endmodule

